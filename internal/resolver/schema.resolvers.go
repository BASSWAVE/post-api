package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"log"
	"post-api/internal/graph"
	"post-api/internal/model"
)

// Children is the resolver for the children field.
func (r *commentResolver) Children(ctx context.Context, obj *model.Comment) ([]*model.Comment, error) {
	log.Println("comment resolver: Children")
	chilrenComments, err := r.serv.GetChildrenComments(obj.ParentID)
	if err != nil {
		return nil, err
	}
	return chilrenComments, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, commentsDisabled bool) (*model.Post, error) {
	log.Println("mutation resolver: createpost")
	post := model.Post{
		Title:            title,
		Content:          content,
		CommentsDisabled: commentsDisabled,
	}
	id, err := r.serv.CreatePost(post)
	if err != nil {
		return nil, err
	}
	post.ID = id
	return &post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID uint, content string, parentID uint) (*model.Comment, error) {
	log.Println("mutation resolver: create comment")
	comment := model.Comment{
		PostID:   postID,
		Content:  content,
		ParentID: parentID,
	}
	id, err := r.serv.CreateComment(comment)
	if err != nil {
		return nil, err
	}
	comment.ID = id
	return &comment, nil
}

// MakeCommentsDisabled is the resolver for the makeCommentsDisabled field.
func (r *mutationResolver) MakeCommentsDisabled(ctx context.Context, postID uint, commentsDisabled bool) (bool, error) {
	log.Println("mutation resolver: makecommentsdis")
	err := r.serv.SetCommentsStatus(postID, commentsDisabled)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post) ([]*model.Comment, error) {
	log.Println("post resolver: comments")
	comments, err := r.serv.GetPostComments(obj.ID)
	if err != nil {
		return nil, err
	}
	return comments, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	log.Println("query resolver: posts")
	posts, err := r.serv.GetAllPosts()
	if err != nil {
		return nil, err
	}
	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id uint) (*model.Post, error) {
	log.Println("query resolver: post")
	post, err := r.serv.GetPost(id)
	if err != nil {
		return nil, err
	}
	return post, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID uint) (<-chan *model.Comment, error) {
	log.Println("sub resolver: commentadded")
	ch := make(chan *model.Comment)
	model.Subs[postID] = append(model.Subs[postID], ch)

	go func() {
		<-ctx.Done()
		close(ch)
	}()
	return ch, nil
}

// Comment returns graph.CommentResolver implementation.
func (r *Resolver) Comment() graph.CommentResolver { return &commentResolver{r} }

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Post returns graph.PostResolver implementation.
func (r *Resolver) Post() graph.PostResolver { return &postResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Subscription returns graph.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
